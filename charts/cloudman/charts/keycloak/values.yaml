clusterDomain: cluster.local
init:
  image:
    pullPolicy: IfNotPresent
    repository: busybox
    tag: 1.31
  resources: {}
keycloak:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "keycloak.selectorLabels" . | nindent 10 }}
            matchExpressions:
              - key: role
                operator: NotIn
                values:
                  - test
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "keycloak.selectorLabels" . | nindent 12 }}
              matchExpressions:
                - key: role
                  operator: NotIn
                  values:
                    - test
            topologyKey: failure-domain.beta.kubernetes.io/zone
  basepath: auth
  cli:
    custom: ""
    datasource: |
      {{ .Files.Get "scripts/datasource.cli" }}
    enabled: true
    ha: |
      {{ .Files.Get "scripts/ha.cli" }}
    logging: |
      {{ .Files.Get "scripts/logging.cli" }}
    nodeIdentifier: |
      {{ .Files.Get "scripts/node-identifier.cli" }}
  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
  enableServiceLinks: false
  existingSecret: ""
  existingSecretKey: password
  extraArgs: ""
  extraContainers: ""
  extraEnv: |
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    # - name: KEYCLOAK_LOGLEVEL
    #   value: DEBUG
    # - name: WILDFLY_LOGLEVEL
    #   value: DEBUG
    # - name: CACHE_OWNERS
    #   value: "2"
    # - name: DB_QUERY_TIMEOUT
    #   value: "60"
    # - name: DB_VALIDATE_ON_MATCH
    #   value: true
    # - name: DB_USE_CAST_FAIL
    #   value: false
  extraInitContainers: ""
  extraPorts: ""
  extraVolumeMounts: ""
  extraVolumes: ""
  hostAliases: []
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: jboss/keycloak
    tag: 7.0.0
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - keycloak.example.com
    labels: {}
    path: /
    tls: []
  jgroups:
    discoveryProperties: |
      "dns_query={{ template "keycloak.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
    discoveryProtocol: dns.DNS_PING
  lifecycleHooks: |
    # postStart:
    #   exec:
    #     command: ["/bin/sh", "-c", "ls"]
  livenessProbe: |
    httpGet:
      path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/
      port: http
    initialDelaySeconds: 300
    timeoutSeconds: 5
  nodeSelector: {}
  password: ""
  persistence:
    dbHost: mykeycloak
    dbName: keycloak
    dbPassword: ""
    dbPort: 5432
    dbUser: keycloak
    dbVendor: h2
    deployPostgres: false
    existingSecret: ""
    existingSecretKey: password
  podAnnotations: {}
  podDisruptionBudget: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe: |
    httpGet:
      path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/realms/master
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  restartPolicy: Always
  route:
    annotations: {}
    enabled: false
    host: null
    labels: {}
    path: /
    tls:
      enabled: true
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
  securityContext:
    fsGroup: 1000
  service:
    annotations: {}
    httpNodePort: ""
    httpPort: 80
    httpsNodePort: ""
    httpsPort: 8443
    jgroupsPort: 7600
    labels: {}
    type: ClusterIP
  serviceAccount:
    create: false
    name: null
  startupScripts: {}
  tolerations: []
  username: keycloak
postgresql:
  extraEnv: {}
  global:
    domain: 192.168.99.100
    postgresql: {}
  image:
    debug: false
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: bitnami/postgresql
    tag: 11.5.0-debian-9-r60
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  master:
    affinity: {}
    extraVolumeMounts: []
    extraVolumes: []
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    tolerations: []
  metrics:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.5.1-debian-9-r73
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    securityContext:
      enabled: false
      runAsUser: 1001
    service:
      annotations:
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
      loadBalancerIP: null
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
  networkPolicy:
    allowExternal: true
    enabled: false
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    mountPath: /bitnami/postgresql
    size: 8Gi
    subPath: ""
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlDatabase: keycloak
  postgresqlPassword: ""
  postgresqlUsername: keycloak
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replication:
    applicationName: my_application
    enabled: false
    numSynchronousReplicas: 0
    password: repl_password
    slaveReplicas: 1
    synchronousCommit: "off"
    user: repl_user
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
    port: 5432
    type: ClusterIP
  serviceAccount:
    enabled: false
  slave:
    affinity: {}
    extraVolumeMounts: []
    extraVolumes: []
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    tolerations: []
  updateStrategy:
    type: RollingUpdate
  volumePermissions:
    enabled: true
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/minideb
      tag: stretch
    securityContext:
      runAsUser: 0
test:
  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
  enabled: true
  image:
    pullPolicy: IfNotPresent
    repository: unguiculus/docker-python3-phantomjs-selenium
    tag: v1
  securityContext:
    fsGroup: 1000
