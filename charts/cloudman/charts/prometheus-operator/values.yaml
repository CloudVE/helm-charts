additionalPrometheusRules: []
alertmanager:
  alertmanagerSpec:
    additionalPeers: []
    affinity: {}
    configMaps: []
    containers: []
    externalUrl: null
    image:
      repository: quay.io/prometheus/alertmanager
      tag: v0.19.0
    listenLocal: false
    logFormat: logfmt
    logLevel: info
    nodeSelector: {}
    paused: false
    podAntiAffinity: ""
    podAntiAffinityTopologyKey: kubernetes.io/hostname
    podMetadata: {}
    portName: web
    priorityClassName: ""
    replicas: 1
    resources: {}
    retention: 120h
    routePrefix: /
    secrets: []
    securityContext:
      fsGroup: 2000
      runAsNonRoot: true
      runAsUser: 1000
    storage: {}
    tolerations: []
    useExistingSecret: false
  config:
    global:
      resolve_timeout: 5m
    receivers:
    - name: "null"
    route:
      group_by:
      - job
      group_interval: 5m
      group_wait: 30s
      receiver: "null"
      repeat_interval: 12h
      routes:
      - match:
          alertname: Watchdog
        receiver: "null"
  enabled: true
  ingress:
    annotations: {}
    enabled: false
    hosts: []
    labels: {}
    paths: []
    tls: []
  podDisruptionBudget:
    enabled: false
    maxUnavailable: ""
    minAvailable: 1
  secret:
    annotations: {}
  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: 30903
    port: 9093
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
    selfMonitor: true
  templateFiles: {}
  tplConfig: false
commonLabels: {}
coreDns:
  enabled: true
  service:
    port: 9153
    targetPort: 9153
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
defaultRules:
  annotations: {}
  appNamespacesTarget: .*
  create: true
  labels: {}
  rules:
    alertmanager: true
    etcd: true
    general: true
    k8s: true
    kubeApiserver: true
    kubePrometheusNodeAlerting: true
    kubePrometheusNodeRecording: true
    kubeScheduler: true
    kubernetesAbsent: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    network: true
    node: true
    prometheus: true
    prometheusOperator: true
    time: true
  runbookUrl: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#
fullnameOverride: ""
global:
  imagePullSecrets: []
  rbac:
    create: true
    pspEnabled: true
grafana:
  additionalDataSources: []
  admin:
    existingSecret: ""
    passwordKey: admin-password
    userKey: admin-user
  adminPassword: prom-operator
  adminUser: admin
  affinity: {}
  dashboardProviders: {}
  dashboards: {}
  dashboardsConfigMaps: {}
  datasources: {}
  defaultDashboardsEnabled: true
  deploymentStrategy:
    type: RollingUpdate
  downloadDashboards:
    env: {}
  downloadDashboardsImage:
    pullPolicy: IfNotPresent
    repository: appropriate/curl
    tag: latest
  enabled: true
  env: {}
  envFromSecret: ""
  envRenderSecret: {}
  envValueFrom: {}
  extraConfigmapMounts: []
  extraContainers: ""
  extraEmptyDirMounts: []
  extraInitContainers: []
  extraSecretMounts: []
  extraVolumeMounts: []
  global:
    domain: 192.168.99.100
    imagePullSecrets: []
    rbac:
      create: true
      pspEnabled: true
  grafana.ini:
    analytics:
      check_for_updates: true
    grafana_net:
      url: https://grafana.net
    log:
      mode: console
    paths:
      data: /var/lib/grafana/data
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
  image:
    pullPolicy: IfNotPresent
    repository: grafana/grafana
    tag: 6.5.2
  ingress:
    annotations: {}
    enabled: false
    extraPaths: []
    hosts: []
    labels: {}
    path: /
    tls: []
  initChownData:
    enabled: true
    image:
      pullPolicy: IfNotPresent
      repository: busybox
      tag: "1.30"
    resources: {}
  ldap:
    config: ""
    enabled: false
    existingSecret: ""
  livenessProbe:
    failureThreshold: 10
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 60
    timeoutSeconds: 30
  namespaceOverride: ""
  nodeSelector: {}
  notifiers: {}
  persistence:
    accessModes:
    - ReadWriteOnce
    enabled: false
    finalizers:
    - kubernetes.io/pvc-protection
    size: 10Gi
    type: pvc
  plugins: []
  podDisruptionBudget: {}
  podPortName: grafana
  rbac:
    create: true
    extraClusterRoleRules: []
    extraRoleRules: []
    namespaced: false
    pspEnabled: true
    pspUseAppArmor: true
  readinessProbe:
    httpGet:
      path: /api/health
      port: 3000
  replicas: 1
  resources: {}
  securityContext:
    fsGroup: 472
    runAsUser: 472
  service:
    annotations: {}
    labels: {}
    port: 80
    portName: service
    targetPort: 3000
    type: ClusterIP
  serviceAccount:
    create: true
    name: null
    nameTest: null
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
    selfMonitor: true
  sidecar:
    dashboards:
      SCProvider: true
      defaultFolderName: null
      enabled: true
      folder: /tmp/dashboards
      label: grafana_dashboard
      provider:
        allowUiUpdates: false
        disableDelete: false
        folder: ""
        name: sidecarProvider
        orgid: 1
        type: file
      searchNamespace: null
    datasources:
      annotations: {}
      createPrometheusReplicasDatasources: false
      defaultDatasourceEnabled: true
      enabled: true
      label: grafana_datasource
      searchNamespace: null
    image: kiwigrid/k8s-sidecar:0.1.20
    imagePullPolicy: IfNotPresent
    resources: {}
  smtp:
    existingSecret: ""
    passwordKey: password
    userKey: user
  testFramework:
    enabled: true
    image: dduportal/bats
    securityContext: {}
    tag: 0.4.0
  tolerations: []
kube-state-metrics:
  affinity: {}
  collectors:
    certificatesigningrequests: true
    configmaps: true
    cronjobs: true
    daemonsets: true
    deployments: true
    endpoints: true
    horizontalpodautoscalers: true
    ingresses: true
    jobs: true
    limitranges: true
    mutatingwebhookconfigurations: false
    namespaces: true
    networkpolicies: false
    nodes: true
    persistentvolumeclaims: true
    persistentvolumes: true
    poddisruptionbudgets: true
    pods: true
    replicasets: true
    replicationcontrollers: true
    resourcequotas: true
    secrets: true
    services: true
    statefulsets: true
    storageclasses: true
    validatingwebhookconfigurations: false
    verticalpodautoscalers: false
    volumeattachements: false
  customLabels: {}
  global:
    domain: 192.168.99.100
    imagePullSecrets: []
    rbac:
      create: true
      pspEnabled: true
  hostNetwork: false
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/coreos/kube-state-metrics
    tag: v1.9.2
  namespaceOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityPolicy:
    annotations: {}
    enabled: true
  prometheus:
    monitor:
      additionalLabels: {}
      enabled: false
      honorLabels: false
      namespace: ""
  prometheusScrape: true
  rbac:
    create: true
  replicas: 1
  securityContext:
    enabled: true
    fsGroup: 65534
    runAsUser: 65534
  service:
    annotations: {}
    loadBalancerIP: ""
    nodePort: 0
    port: 8080
    type: ClusterIP
  serviceAccount:
    create: true
    imagePullSecrets: []
    name: null
  tolerations: []
kubeApiServer:
  enabled: true
  relabelings: []
  serviceMonitor:
    interval: ""
    jobLabel: component
    metricRelabelings: []
    selector:
      matchLabels:
        component: apiserver
        provider: kubernetes
  tlsConfig:
    insecureSkipVerify: false
    serverName: kubernetes
kubeControllerManager:
  enabled: true
  endpoints: []
  service:
    port: 10252
    targetPort: 10252
  serviceMonitor:
    https: false
    insecureSkipVerify: null
    interval: ""
    metricRelabelings: []
    relabelings: []
    serverName: null
kubeDns:
  enabled: false
  service:
    dnsmasq:
      port: 10054
      targetPort: 10054
    skydns:
      port: 10055
      targetPort: 10055
  serviceMonitor:
    dnsmasqMetricRelabelings: []
    dnsmasqRelabelings: []
    interval: ""
    metricRelabelings: []
    relabelings: []
kubeEtcd:
  enabled: true
  endpoints: []
  service:
    port: 2379
    targetPort: 2379
  serviceMonitor:
    caFile: ""
    certFile: ""
    insecureSkipVerify: false
    interval: ""
    keyFile: ""
    metricRelabelings: []
    relabelings: []
    scheme: http
    serverName: ""
kubeProxy:
  enabled: true
  endpoints: []
  service:
    port: 10249
    targetPort: 10249
  serviceMonitor:
    https: false
    interval: ""
    metricRelabelings: []
    relabelings: []
kubeScheduler:
  enabled: true
  endpoints: []
  service:
    port: 10251
    targetPort: 10251
  serviceMonitor:
    https: false
    insecureSkipVerify: null
    interval: ""
    metricRelabelings: []
    relabelings: []
    serverName: null
kubeStateMetrics:
  enabled: true
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
kubelet:
  enabled: true
  namespace: kube-system
  serviceMonitor:
    cAdvisorMetricRelabelings: []
    cAdvisorRelabelings:
    - sourceLabels:
      - __metrics_path__
      targetLabel: metrics_path
    https: true
    interval: ""
    metricRelabelings: []
    relabelings:
    - sourceLabels:
      - __metrics_path__
      targetLabel: metrics_path
nameOverride: ""
nodeExporter:
  enabled: true
  jobLabel: jobLabel
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
    scrapeTimeout: ""
prometheus:
  additionalPodMonitors: []
  additionalServiceMonitors: []
  annotations: {}
  enabled: true
  ingress:
    annotations: {}
    enabled: false
    hosts: []
    labels: {}
    paths: []
    tls: []
  ingressPerReplica:
    annotations: {}
    enabled: false
    hostDomain: ""
    hostPrefix: ""
    labels: {}
    paths: []
    tlsSecretName: ""
  podDisruptionBudget:
    enabled: false
    maxUnavailable: ""
    minAvailable: 1
  podSecurityPolicy:
    allowedCapabilities: []
  prometheusSpec:
    additionalAlertManagerConfigs: []
    additionalAlertRelabelConfigs: []
    additionalPrometheusSecretsAnnotations: {}
    additionalScrapeConfigs: []
    additionalScrapeConfigsExternal: false
    affinity: {}
    alertingEndpoints: []
    configMaps: []
    containers: []
    enableAdminAPI: false
    evaluationInterval: ""
    externalLabels: {}
    externalUrl: ""
    image:
      repository: quay.io/prometheus/prometheus
      tag: v2.13.1
    listenLocal: false
    logFormat: logfmt
    logLevel: info
    nodeSelector: {}
    paused: false
    podAntiAffinity: ""
    podAntiAffinityTopologyKey: kubernetes.io/hostname
    podMetadata: {}
    podMonitorNamespaceSelector: {}
    podMonitorSelector: {}
    podMonitorSelectorNilUsesHelmValues: true
    portName: web
    priorityClassName: ""
    prometheusExternalLabelName: ""
    prometheusExternalLabelNameClear: false
    query: {}
    remoteRead: []
    remoteWrite: []
    remoteWriteDashboards: false
    replicaExternalLabelName: ""
    replicaExternalLabelNameClear: false
    replicas: 1
    resources: {}
    retention: 10d
    retentionSize: ""
    routePrefix: /
    ruleNamespaceSelector: {}
    ruleSelector: {}
    ruleSelectorNilUsesHelmValues: true
    scrapeInterval: ""
    secrets: []
    securityContext:
      fsGroup: 2000
      runAsNonRoot: true
      runAsUser: 1000
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: true
    storageSpec: {}
    thanos: {}
    tolerations: []
    walCompression: false
  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: 30090
    port: 9090
    sessionAffinity: ""
    targetPort: 9090
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    bearerTokenFile: null
    interval: ""
    metricRelabelings: []
    relabelings: []
    scheme: ""
    selfMonitor: true
    tlsConfig: {}
  servicePerReplica:
    annotations: {}
    enabled: false
    loadBalancerSourceRanges: []
    nodePort: 30091
    port: 9090
    targetPort: 9090
    type: ClusterIP
prometheus-node-exporter:
  affinity: {}
  configmaps: []
  endpoints: []
  extraArgs:
  - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)
  - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
  extraHostVolumeMounts: []
  global:
    domain: 192.168.99.100
    imagePullSecrets: []
    rbac:
      create: true
      pspEnabled: true
  hostNetwork: true
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/prometheus/node-exporter
    tag: v0.18.1
  namespaceOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podLabels:
    jobLabel: node-exporter
  prometheus:
    monitor:
      additionalLabels: {}
      enabled: false
      namespace: ""
      scrapeTimeout: 10s
  rbac:
    create: true
    pspEnabled: true
  resources: {}
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
  service:
    annotations:
      prometheus.io/scrape: "true"
    nodePort: null
    port: 9100
    targetPort: 9100
    type: ClusterIP
  serviceAccount:
    create: true
    imagePullSecrets: []
    name: null
  tolerations:
  - effect: NoSchedule
    operator: Exists
prometheusOperator:
  admissionWebhooks:
    enabled: true
    failurePolicy: Fail
    patch:
      affinity: {}
      enabled: true
      image:
        pullPolicy: IfNotPresent
        repository: jettech/kube-webhook-certgen
        tag: v1.0.0
      nodeSelector: {}
      podAnnotations: {}
      priorityClassName: ""
      resources: {}
      tolerations: []
  affinity: {}
  cleanupCustomResource: false
  configReloaderCpu: 100m
  configReloaderMemory: 25Mi
  configmapReloadImage:
    repository: quay.io/coreos/configmap-reload
    tag: v0.0.1
  createCustomResource: true
  denyNamespaces: []
  enabled: true
  hyperkubeImage:
    pullPolicy: IfNotPresent
    repository: k8s.gcr.io/hyperkube
    tag: v1.12.1
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/coreos/prometheus-operator
    tag: v0.34.0
  kubeletService:
    enabled: true
    namespace: kube-system
  namespaces: {}
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  prometheusConfigReloaderImage:
    repository: quay.io/coreos/prometheus-config-reloader
    tag: v0.34.0
  resources: {}
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
  service:
    additionalPorts: []
    annotations: {}
    clusterIP: ""
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: 30080
    nodePortTls: 30443
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
    selfMonitor: true
  tlsProxy:
    enabled: true
    image:
      pullPolicy: IfNotPresent
      repository: squareup/ghostunnel
      tag: v1.4.1
    resources: {}
  tolerations: []
